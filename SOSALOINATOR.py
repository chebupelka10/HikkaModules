# meta developer: @RemoveWoman

from .. import loader, utils
from telethon import events
from telethon.tl.types import UpdateUserTyping, UpdateChatUserTyping
import asyncio

class SosaloinatorMod(loader.Module):
    """–î–∞–≤–Ω–æ –º–µ—á—Ç–∞–ª–∏ –∑–∞–±–∞–π—Ç–∏—Ç—å –¥—É—Ä–≥–∞ –Ω–∞ —Å–æ—Å–∞–ª? –≠–¢–û–¢ –ú–û–î–£–õ–¨ –î–õ–Ø –¢–ê–ö–ò–• –ñ–ï –ò–î–ò–û–¢–û–í –ö–ê–ö –Ø –ö–û–¢–û–†–´–ï –õ–Æ–ë–Ø–¢ –ë–ê–ô–¢–ò–¢–¨ –ö–ê–ñ–î–û–ì–û –í–¢–û–†–û–ì–û. –í –∫–æ–Ω—Ñ–∏–≥–µ –º–æ–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —á—Ç–æ –Ω–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫ –Ω–∞—á–Ω–µ—Ç –ø–µ—á–∞—Ç–∞—Ç—å. (–∫–¥ 3 –º–∏–Ω—É—Ç—ã –Ω–∞ –æ—Ç–≤–µ—Ç —á–µ–ª–æ–≤–µ–∫–∞)"""

    strings = {"name": "Sosaloinator",
               "no_reply": "<b>‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ –≥—Ä—É–ø–ø–µ.</b>",
               "watching": "<b>üîç –û—Ç—Å–ª–µ–∂–∏–≤–∞—é —Å—Ç–∞—Ç—É—Å '–ø–µ—á–∞—Ç–∞–µ—Ç'...</b>",
               "not_typing": "–£–∂–µ –Ω–µ –Ω–∞–¥–æ, —Å–ø–∞—Å–∏–±–æ"}

    def __init__(self):
        self.config = loader.ModuleConfig(
            "text", "–°–æ—Å–∞–ª?",
            "–û—Ç–≤–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–π –ø—Ä–∏ —Å—Ç–∞—Ç—É—Å–µ '–ø–µ—á–∞—Ç–∞–µ—Ç'."
        )
        self.tasks = {}

    async def voprcmd(self, message):
        """[—Ç–µ–∫—Å—Ç] –í–≤–æ–¥—è —ç—Ç–æ –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —á—Ç–æ –≤–∞—Å –±—É–¥—É—Ç –Ω–µ–Ω–∞–≤–∏–¥–µ—Ç—å –≤—Å–µ. (–µ—Å–ª–∏ —á—Ç–æ —ç—Ç–∞ —à—Ç—É–∫–∞ –≤ –≥—Ä—É–ø–ø–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–ø–ª–∞–µ–º –Ω–∞ –∑–∞–±–∞–π—á–µ–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞)"""
        args = utils.get_args_raw(message)
        reply = await message.get_reply_message()
        chat = message.chat_id

        if message.is_private:
            target_id = message.to_id.user_id
        else:
            if not reply:
                await utils.answer(message, self.strings["no_reply"])
                return
            target_id = reply.sender_id

        task_key = (chat, target_id)
        if task_key in self.tasks:
            self.tasks[task_key].cancel()

        if args:
            await message.edit(args)
        else:
            await message.delete()

        self.tasks[task_key] = asyncio.create_task(self.watch_typing(chat, target_id, message.client))

    async def watch_typing(self, chat_id, user_id, client):
        try:
            typing_detected = asyncio.Event()

            @client.on(events.Raw)
            async def handler(event):
                if isinstance(event, UpdateUserTyping):
                    if event.user_id == user_id and chat_id == user_id:
                        typing_detected.set()

                if isinstance(event, UpdateChatUserTyping):
                    if event.user_id == user_id and event.chat_id == chat_id:
                        typing_detected.set()

            client.add_event_handler(handler)

            for _ in range(900):
                if typing_detected.is_set():
                    await client.send_message(chat_id, self.config["text"])
                    break
                await asyncio.sleep(0.2)

            else:
                await client.send_message(chat_id, self.strings["not_typing"])

            client.remove_event_handler(handler)

        except asyncio.CancelledError:
            pass
