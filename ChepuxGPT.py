import requests
import asyncio
from telethon import functions, types
from .. import loader, utils
import aiohttp
import io

@loader.tds
class ChepuxGPTMod(loader.Module):
    """–ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã chatgpt, –∞ —Ç–∞–∫–∂–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è by @chepuxcat"""
    strings = {"name": "ChepuxGPT"}

    async def client_ready(self, client, db):
        self.client = client

    async def gptcmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ gpt <–≤–æ–ø—Ä–æ—Å> –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ–±—ã —Å–ø—Ä–æ—Å–∏—Ç—å –≤–æ–ø—Ä–æ—Å —É chatgpt"""
        
        question = utils.get_args_raw(message)
        if not question:
            reply = await message.get_reply_message()
            if reply:
                question = reply.raw_text
            else:
                await utils.answer(message, "<b><emoji document_id=5321288244350951776>üëé</emoji> –í—ã –Ω–µ –∑–∞–¥–∞–ª–∏ –≤–æ–ø—Ä–æ—Å.</b>")
                return

        question = question.replace(".gpt", "").strip()
        question = question.replace(".–≥–ø—Ç", "").strip()
        
        prompt = [{"role": "user", "content": question}]

        await message.edit("<b><emoji document_id=5409143295039252230>üîÑ</emoji> –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...</b>")
        try:
            response = requests.post('http://api.onlysq.ru/ai/v1', json=prompt)
            response_json = response.json()
            if 'answer' in response_json:
                answer = response_json['answer']
                answer = answer.replace("GPT >>", "").strip()
            elif 'error' in response_json:
                answer = f"–û—à–∏–±–∫–∞ API: {response_json['error']}"
            else:
                answer = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API."

            await utils.answer(message, f"<b><emoji document_id=6323343426343404864>‚ùì</emoji> –í–æ–ø—Ä–æ—Å:</b> {question}\n<b><emoji document_id=6323463440614557670>‚ò∫Ô∏è</emoji> –û—Ç–≤–µ—Ç:</b> {answer}")
        except Exception as e:
            await utils.answer(message, f"<b><emoji document_id=5314591660192046611>‚ùå</emoji> –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:</b> {e}")

    async def imaginecmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ imagine <–∑–∞–ø—Ä–æ—Å> —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ <–∫–æ–ª-–≤–æ>"""
        
        request_text = utils.get_args_raw(message)
        if not request_text:
            reply = await message.get_reply_message()
            if reply:
                request_text = reply.raw_text
            else:
                await utils.answer(message, "<b><emoji document_id=5321288244350951776>üëé</emoji> –í—ã –Ω–µ –∑–∞–¥–∞–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ imagine</b>")
                return
        
        request_text = request_text.replace(".imagine", "").strip()

        # –†–∞–∑–¥–µ–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        parts = request_text.rsplit(' ', 1)
        if len(parts) == 2 and parts[1].isdigit():
            image_count = int(parts[1])
            prompt = parts[0]
        else:
            image_count = 1
            prompt = request_text

        await utils.answer(message, "<b><emoji document_id=5409143295039252230>üîÑ</emoji> –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...</b>")

        try:
            dict_to_send = {
                "model": "kandinsky",
                "request": {'messages': [{"content": prompt}], "meta": {"image_count": image_count}}
            }

            async with aiohttp.ClientSession() as session:
                async with session.post('http://api.onlysq.ru/ai/v2', json=dict_to_send, timeout=110) as response:
                    response.raise_for_status()
                    response_json = await response.json()

                    images = response_json.get('answer', [])
                    
                    for index, image_url in enumerate(images):
                        image_url = image_url.replace('https://', 'http://')
                        async with session.get(image_url) as image_response:
                            image_data = await image_response.read()
                            image_buffer = io.BytesIO(image_data)
                            image_buffer.name = image_url.split('/')[-1]
                            await message.client.send_file(message.to_id, image_buffer, reply_to=message.id)

                    if images:
                        await utils.answer(message, f"<b><emoji document_id=5237907553152672597>‚úÖ</emoji> –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ(-—è) –≥–æ—Ç–æ–≤–æ(-—ã)!\n\n<emoji document_id=6323343426343404864>‚ùì</emoji> –ó–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {prompt}</b>")
                    else:
                        await utils.answer(message, "<b><emoji document_id=5314591660192046611>‚ùå</emoji> –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç API.</b>")
        except aiohttp.ClientError as e:
            await utils.answer(message, f"<b><emoji document_id=5314591660192046611>‚ùå</emoji> –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API:</b> {e}")
        except ValueError:
            await utils.answer(message, "<b><emoji document_id=5314591660192046611>‚ùå</emoji> –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API.</b>")
