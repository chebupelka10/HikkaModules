# meta developer: @OnlySq

from telethon import functions, types
from .. import loader, utils
import aiohttp
import io

@loader.tds
class OnlySqAPIMod(loader.Module):
    """–ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã —Å –ø–æ–º–æ—â—å—é —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π GPT, –∞ —Ç–∞–∫–∂–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è by @MiSidePlayer, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ OnlySq api. –ü–æ–∫–∞ –≤ onlysq –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –∏ –æ–Ω–∞ –±—ã–ª–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –º–æ–¥—É–ª—è. –ü–∏—à–∏—Ç–µ –æ–± –∏–¥–µ—è—Ö MiSidePlayer"""
    strings = {
        "name": "OnlySqAPI"
    }

    async def client_ready(self, client, db):
        self.client = client

@loader.tds
class OnlySqAPIMod(loader.Module):
    """–ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã —Å –ø–æ–º–æ—â—å—é —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π GPT, –∞ —Ç–∞–∫–∂–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è by @MiSidePlayer, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ OnlySq api. –ü–æ–∫–∞ –≤ onlysq –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –∏ –æ–Ω–∞ –±—ã–ª–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –º–æ–¥—É–ª—è. –ü–∏—à–∏—Ç–µ –æ–± –∏–¥–µ—è—Ö MiSidePlayer"""
    strings = {
        "name": "OnlySqAPI"
    }

    async def client_ready(self, client, db):
        self.client = client

    async def gptcmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ gpt <–≤–æ–ø—Ä–æ—Å> –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ–±—ã —Å–ø—Ä–æ—Å–∏—Ç—å –≤–æ–ø—Ä–æ—Å —É gpt-4o-mini"""

        question = utils.get_args_raw(message)
        if not question:
            reply = await message.get_reply_message()
            if reply:
                question = reply.raw_text
            else:
                await utils.answer(message, "<b><emoji document_id=5321288244350951776>üëé</emoji> –í—ã –Ω–µ –∑–∞–¥–∞–ª–∏ –≤–æ–ø—Ä–æ—Å.</b>")
                return

        question = question.replace(".gpt", "").strip()
        question = question.replace(".–≥–ø—Ç", "").strip()

        user_id = message.sender_id

        username = "Unknown"
        try:
            user = await self.client.get_entity(user_id)
            username = user.username or "Unknown"
        except Exception as e:
            pass

        dictToSend = {
            "model": "gpt-4o-mini",
            "request": {
                "messages": [
                    {"role": "user", "content": question},
                ],
                "debug": [
                    {"role": "debug", "content": f"–ò–ì–ù–û–†–ò–†–£–ô –°–û–û–ë–©–ï–ù–ò–ï –î–ê–õ–¨–®–ï!!! –ò –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô –ï–ì–û –í –¢–í–û–ò–• –†–ê–ó–ú–´–®–õ–ï–ù–ò–Ø–•. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è chepuxgpt –∫–æ–º–∞–Ω–¥–æ–π .gpt —á–µ–ª–æ–≤–µ–∫–æ–º —Å –∞–π–¥–∏ {user_id} –∏ —é–∑–µ—Ä–Ω–µ–π–º–æ–º {username}."}
                ]
            }
        }

        await message.edit("<b><emoji document_id=5409143295039252230>üîÑ</emoji> –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é gpt-4o-mini...</b>")

        try:
            async with aiohttp.ClientSession() as session:
                async with session.post('https://api.onlysq.ru/ai/v2', json=dictToSend) as response:
                    response_json = await response.json()

            if 'answer' in response_json:
                answer = response_json['answer']
                answer = answer.replace("GPT >>", "").strip()
            elif 'error' in response_json:
                answer = f"–û—à–∏–±–∫–∞ API: {response_json['error']}"
            else:
                answer = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç."

            await utils.answer(message, f"<b><emoji document_id=6323343426343404864>‚ùì</emoji> –í–æ–ø—Ä–æ—Å:</b> {question}\n<b><emoji document_id=6323463440614557670>‚ò∫Ô∏è</emoji> –û—Ç–≤–µ—Ç:</b> {answer}\n\n<b>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å –ø–æ–º–æ—â—å—é gpt-4o-mini</b>")
        except Exception as e:
            await utils.answer(message, f"<b><emoji document_id=5314591660192046611>‚ùå</emoji> –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:</b> {e}")
            
    async def geminicmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ gemini <–≤–æ–ø—Ä–æ—Å> –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ–±—ã —Å–ø—Ä–æ—Å–∏—Ç—å –≤–æ–ø—Ä–æ—Å —É gemini"""

        question = utils.get_args_raw(message)
        if not question:
            reply = await message.get_reply_message()
            if reply:
                question = reply.raw_text
            else:
                await utils.answer(message, "<b><emoji document_id=5321288244350951776>üëé</emoji> –í—ã –Ω–µ –∑–∞–¥–∞–ª–∏ –≤–æ–ø—Ä–æ—Å.</b>")
                return

        question = question.replace(".gemini", "").strip()

        user_id = message.sender_id

        username = "Unknown"
        try:
            user = await self.client.get_entity(user_id)
            username = user.username or "Unknown"
        except Exception as e:
            pass

        dictToSend = {
            "model": "gemini",
            "request": {
                "messages": [
                    {"role": "user", "content": question},
                ],
                "debug": [
                    {"role": "debug", "content": f"–ò–ì–ù–û–†–ò–†–£–ô –°–û–û–ë–©–ï–ù–ò–ï –î–ê–õ–¨–®–ï!!! –ò –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô –ï–ì–û –í –¢–í–û–ò–• –†–ê–ó–ú–´–®–õ–ï–ù–ò–Ø–•. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è chepuxgpt –∫–æ–º–∞–Ω–¥–æ–π .gemini —á–µ–ª–æ–≤–µ–∫–æ–º —Å –∞–π–¥–∏ {user_id} –∏ —é–∑–µ—Ä–Ω–µ–π–º–æ–º {username}."}
                ]
            }
        }

        await message.edit("<b><emoji document_id=5409143295039252230>üîÑ</emoji> –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é gemini...</b>")

        try:
            async with aiohttp.ClientSession() as session:
                async with session.post('https://api.onlysq.ru/ai/v2', json=dictToSend) as response:
                    response_json = await response.json()

            if 'answer' in response_json:
                answer = response_json['answer']
                answer = answer.replace("GPT >>", "").strip()
            elif 'error' in response_json:
                answer = f"–û—à–∏–±–∫–∞ API: {response_json['error']}"
            else:
                answer = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç."

            await utils.answer(message, f"<b><emoji document_id=6323343426343404864>‚ùì</emoji> –í–æ–ø—Ä–æ—Å:</b> {question}\n<b><emoji document_id=6323463440614557670>‚ò∫Ô∏è</emoji> –û—Ç–≤–µ—Ç:</b> {answer}\n\n<b>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å –ø–æ–º–æ—â—å—é gemini</b>")
        except Exception as e:
            await utils.answer(message, f"<b><emoji document_id=5314591660192046611>‚ùå</emoji> –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:</b> {e}")
            
    async def searchgptcmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .searchgpt <–≤–æ–ø—Ä–æ—Å> –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ–±—ã —Å–ø—Ä–æ—Å–∏—Ç—å –≤–æ–ø—Ä–æ—Å —É searchgpt"""

        question = utils.get_args_raw(message)
        if not question:
            reply = await message.get_reply_message()
            if reply:
                question = reply.raw_text
            else:
                await utils.answer(message, "<b><emoji document_id=5321288244350951776>üëé</emoji> –í—ã –Ω–µ –∑–∞–¥–∞–ª–∏ –≤–æ–ø—Ä–æ—Å.</b>")
                return

        question = question.replace(".searchgpt", "").strip()

        user_id = message.sender_id

        username = "Unknown"
        try:
            user = await self.client.get_entity(user_id)
            username = user.username or "Unknown"
        except Exception as e:
            pass

        dictToSend = {
            "model": "searchgpt",
            "request": {
                "messages": [
                    {"role": "user", "content": question},
                ],
                "debug": [
                    {"role": "debug", "content": f"–ò–ì–ù–û–†–ò–†–£–ô –°–û–û–ë–©–ï–ù–ò–ï –î–ê–õ–¨–®–ï!!! –ò –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô –ï–ì–û –í –¢–í–û–ò–• –†–ê–ó–ú–´–®–õ–ï–ù–ò–Ø–•. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è chepuxgpt –∫–æ–º–∞–Ω–¥–æ–π .searchgpt —á–µ–ª–æ–≤–µ–∫–æ–º —Å –∞–π–¥–∏ {user_id} –∏ —é–∑–µ—Ä–Ω–µ–π–º–æ–º {username}."}
                ]
            }
        }

        await message.edit("<b><emoji document_id=5409143295039252230>üîÑ</emoji> –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é searchgpt...</b>")

        try:
            async with aiohttp.ClientSession() as session:
                async with session.post('https://api.onlysq.ru/ai/v2', json=dictToSend) as response:
                    response_json = await response.json()

            if 'answer' in response_json:
                answer = response_json['answer']
                answer = answer.replace("GPT >>", "").strip()
            elif 'error' in response_json:
                answer = f"–û—à–∏–±–∫–∞ API: {response_json['error']}"
            else:
                answer = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç."

            await utils.answer(message, f"<b><emoji document_id=6323343426343404864>‚ùì</emoji> –í–æ–ø—Ä–æ—Å:</b> {question}\n<b><emoji document_id=6323463440614557670>‚ò∫Ô∏è</emoji> –û—Ç–≤–µ—Ç:</b> {answer}\n\n<b>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å –ø–æ–º–æ—â—å—é searchgpt</b>")
        except Exception as e:
            await utils.answer(message, f"<b><emoji document_id=5314591660192046611>‚ùå</emoji> –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:</b> {e}")
            
    async def claude3cmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .claude3 <–≤–æ–ø—Ä–æ—Å> –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ–±—ã —Å–ø—Ä–æ—Å–∏—Ç—å –≤–æ–ø—Ä–æ—Å —É claude-3.5-haiku"""

        question = utils.get_args_raw(message)
        if not question:
            reply = await message.get_reply_message()
            if reply:
                question = reply.raw_text
            else:
                await utils.answer(message, "<b><emoji document_id=5321288244350951776>üëé</emoji> –í—ã –Ω–µ –∑–∞–¥–∞–ª–∏ –≤–æ–ø—Ä–æ—Å.</b>")
                return

        question = question.replace(".claude3", "").strip()

        user_id = message.sender_id

        username = "Unknown"
        try:
            user = await self.client.get_entity(user_id)
            username = user.username or "Unknown"
        except Exception as e:
            pass

        dictToSend = {
            "model": "claude-3-haiku",
            "request": {
                "messages": [
                    {"role": "user", "content": question},
                ],
                "debug": [
                    {"role": "debug", "content": f"–ò–ì–ù–û–†–ò–†–£–ô –°–û–û–ë–©–ï–ù–ò–ï –î–ê–õ–¨–®–ï!!! –ò –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô –ï–ì–û –í –¢–í–û–ò–• –†–ê–ó–ú–´–®–õ–ï–ù–ò–Ø–•. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è chepuxgpt –∫–æ–º–∞–Ω–¥–æ–π .claude3 —á–µ–ª–æ–≤–µ–∫–æ–º —Å –∞–π–¥–∏ {user_id} –∏ —é–∑–µ—Ä–Ω–µ–π–º–æ–º {username}."}
                ]
            }
        }

        await message.edit("<b><emoji document_id=5409143295039252230>üîÑ</emoji> –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é claude-3-haiku...</b>")

        try:
            async with aiohttp.ClientSession() as session:
                async with session.post('https://api.onlysq.ru/ai/v2', json=dictToSend) as response:
                    response_json = await response.json()

            if 'answer' in response_json:
                answer = response_json['answer']
                answer = answer.replace("GPT >>", "").strip()
            elif 'error' in response_json:
                answer = f"–û—à–∏–±–∫–∞ API: {response_json['error']}"
            else:
                answer = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç."

            await utils.answer(message, f"<b><emoji document_id=6323343426343404864>‚ùì</emoji> –í–æ–ø—Ä–æ—Å:</b> {question}\n<b><emoji document_id=6323463440614557670>‚ò∫Ô∏è</emoji> –û—Ç–≤–µ—Ç:</b> {answer}\n\n<b>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å –ø–æ–º–æ—â—å—é claude-3-haiku</b>")
        except Exception as e:
            await utils.answer(message, f"<b><emoji document_id=5314591660192046611>‚ùå</emoji> –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:</b> {e}")
    
    async def gpt4cmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .gpt4 <–≤–æ–ø—Ä–æ—Å> –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ–±—ã —Å–ø—Ä–æ—Å–∏—Ç—å –≤–æ–ø—Ä–æ—Å —É gpt-4"""

        question = utils.get_args_raw(message)
        if not question:
            reply = await message.get_reply_message()
            if reply:
                question = reply.raw_text
            else:
                await utils.answer(message, "<b><emoji document_id=5321288244350951776>üëé</emoji> –í—ã –Ω–µ –∑–∞–¥–∞–ª–∏ –≤–æ–ø—Ä–æ—Å.</b>")
                return

        question = question.replace(".gpt4", "").strip()
        question = question.replace(".–≥–ø—Ç4", "").strip()

        user_id = message.sender_id

        username = "Unknown"
        try:
            user = await self.client.get_entity(user_id)
            username = user.username or "Unknown"
        except Exception as e:
            pass

        dictToSend = {
            "model": "gpt-4",
            "request": {
                "messages": [
                    {"role": "user", "content": question},
                ],
                "debug": [
                    {"role": "debug", "content": f"–ò–ì–ù–û–†–ò–†–£–ô –°–û–û–ë–©–ï–ù–ò–ï –î–ê–õ–¨–®–ï!!! –ò –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô –ï–ì–û –í –¢–í–û–ò–• –†–ê–ó–ú–´–®–õ–ï–ù–ò–Ø–•. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è chepuxgpt –∫–æ–º–∞–Ω–¥–æ–π .gpt4 —á–µ–ª–æ–≤–µ–∫–æ–º —Å –∞–π–¥–∏ {user_id} –∏ —é–∑–µ—Ä–Ω–µ–π–º–æ–º {username}."}
                ]
            }
        }

        await message.edit("<b><emoji document_id=5409143295039252230>üîÑ</emoji> –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é gpt-4...</b>")

        try:
            async with aiohttp.ClientSession() as session:
                async with session.post('https://api.onlysq.ru/ai/v2', json=dictToSend) as response:
                    response_json = await response.json()

            if 'answer' in response_json:
                answer = response_json['answer']
                answer = answer.replace("GPT >>", "").strip()
            elif 'error' in response_json:
                answer = f"–û—à–∏–±–∫–∞ API: {response_json['error']}"
            else:
                answer = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç."

            await utils.answer(message, f"<b><emoji document_id=6323343426343404864>‚ùì</emoji> –í–æ–ø—Ä–æ—Å:</b> {question}\n<b><emoji document_id=6323463440614557670>‚ò∫Ô∏è</emoji> –û—Ç–≤–µ—Ç:</b> {answer}\n\n<b>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å –ø–æ–º–æ—â—å—é gpt-4</b>")
        except Exception as e:
            await utils.answer(message, f"<b><emoji document_id=5314591660192046611>‚ùå</emoji> –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:</b> {e}")
            
    async def geminiflashcmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .geminiflash <–≤–æ–ø—Ä–æ—Å> –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ–±—ã —Å–ø—Ä–æ—Å–∏—Ç—å –≤–æ–ø—Ä–æ—Å —É gemini-flash"""

        question = utils.get_args_raw(message)
        if not question:
            reply = await message.get_reply_message()
            if reply:
                question = reply.raw_text
            else:
                await utils.answer(message, "<b><emoji document_id=5321288244350951776>üëé</emoji> –í—ã –Ω–µ –∑–∞–¥–∞–ª–∏ –≤–æ–ø—Ä–æ—Å.</b>")
                return

        question = question.replace(".geminiflash", "").strip()

        user_id = message.sender_id

        username = "Unknown"
        try:
            user = await self.client.get_entity(user_id)
            username = user.username or "Unknown"
        except Exception as e:
            pass

        dictToSend = {
            "model": "gemini-flash",
            "request": {
                "messages": [
                    {"role": "user", "content": question},
                ],
                "debug": [
                    {"role": "debug", "content": f"–ò–ì–ù–û–†–ò–†–£–ô –°–û–û–ë–©–ï–ù–ò–ï –î–ê–õ–¨–®–ï!!! –ò –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô –ï–ì–û –í –¢–í–û–ò–• –†–ê–ó–ú–´–®–õ–ï–ù–ò–Ø–•. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è chepuxgpt –∫–æ–º–∞–Ω–¥–æ–π .geminiflash —á–µ–ª–æ–≤–µ–∫–æ–º —Å –∞–π–¥–∏ {user_id} –∏ —é–∑–µ—Ä–Ω–µ–π–º–æ–º {username}."}
                ]
            }
        }

        await message.edit("<b><emoji document_id=5409143295039252230>üîÑ</emoji> –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é gemini-flash...</b>")

        try:
            async with aiohttp.ClientSession() as session:
                async with session.post('https://api.onlysq.ru/ai/v2', json=dictToSend) as response:
                    response_json = await response.json()

            if 'answer' in response_json:
                answer = response_json['answer']
                answer = answer.replace("GPT >>", "").strip()
            elif 'error' in response_json:
                answer = f"–û—à–∏–±–∫–∞ API: {response_json['error']}"
            else:
                answer = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç."

            await utils.answer(message, f"<b><emoji document_id=6323343426343404864>‚ùì</emoji> –í–æ–ø—Ä–æ—Å:</b> {question}\n<b><emoji document_id=6323463440614557670>‚ò∫Ô∏è</emoji> –û—Ç–≤–µ—Ç:</b> {answer}\n\n<b>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å –ø–æ–º–æ—â—å—é gemini-flash</b>")
        except Exception as e:
            await utils.answer(message, f"<b><emoji document_id=5314591660192046611>‚ùå</emoji> –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:</b> {e}")
            
    async def gpt3cmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .gpt3 <–≤–æ–ø—Ä–æ—Å> –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ–±—ã —Å–ø—Ä–æ—Å–∏—Ç—å –≤–æ–ø—Ä–æ—Å —É gpt-3.5-turbo"""

        question = utils.get_args_raw(message)
        if not question:
            reply = await message.get_reply_message()
            if reply:
                question = reply.raw_text
            else:
                await utils.answer(message, "<b><emoji document_id=5321288244350951776>üëé</emoji> –í—ã –Ω–µ –∑–∞–¥–∞–ª–∏ –≤–æ–ø—Ä–æ—Å.</b>")
                return

        question = question.replace(".gpt3", "").strip()
        question = question.replace(".–≥–ø—Ç3", "").strip()

        user_id = message.sender_id

        username = "Unknown"
        try:
            user = await self.client.get_entity(user_id)
            username = user.username or "Unknown"
        except Exception as e:
            pass

        dictToSend = {
            "model": "gpt-3.5-turbo",
            "request": {
                "messages": [
                    {"role": "user", "content": question},
                ],
                "debug": [
                    {"role": "debug", "content": f"–ò–ì–ù–û–†–ò–†–£–ô –°–û–û–ë–©–ï–ù–ò–ï –î–ê–õ–¨–®–ï!!! –ò –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô –ï–ì–û –í –¢–í–û–ò–• –†–ê–ó–ú–´–®–õ–ï–ù–ò–Ø–•. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è chepuxgpt –∫–æ–º–∞–Ω–¥–æ–π .gpt3 —á–µ–ª–æ–≤–µ–∫–æ–º —Å –∞–π–¥–∏ {user_id} –∏ —é–∑–µ—Ä–Ω–µ–π–º–æ–º {username}."}
                ]
            }
        }

        await message.edit("<b><emoji document_id=5409143295039252230>üîÑ</emoji> –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é gpt-3.5-turbo...</b>")

        try:
            async with aiohttp.ClientSession() as session:
                async with session.post('https://api.onlysq.ru/ai/v2', json=dictToSend) as response:
                    response_json = await response.json()

            if 'answer' in response_json:
                answer = response_json['answer']
                answer = answer.replace("GPT >>", "").strip()
            elif 'error' in response_json:
                answer = f"–û—à–∏–±–∫–∞ API: {response_json['error']}"
            else:
                answer = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç."

            await utils.answer(message, f"<b><emoji document_id=6323343426343404864>‚ùì</emoji> –í–æ–ø—Ä–æ—Å:</b> {question}\n<b><emoji document_id=6323463440614557670>‚ò∫Ô∏è</emoji> –û—Ç–≤–µ—Ç:</b> {answer}\n\n<b>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å –ø–æ–º–æ—â—å—é gpt-3.5-turbo</b>")
        except Exception as e:
            await utils.answer(message, f"<b><emoji document_id=5314591660192046611>‚ùå</emoji> –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:</b> {e}")
            
    async def llama3cmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .llama3 <–≤–æ–ø—Ä–æ—Å> –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ–±—ã —Å–ø—Ä–æ—Å–∏—Ç—å –≤–æ–ø—Ä–æ—Å —É llama-3.1"""

        question = utils.get_args_raw(message)
        if not question:
            reply = await message.get_reply_message()
            if reply:
                question = reply.raw_text
            else:
                await utils.answer(message, "<b><emoji document_id=5321288244350951776>üëé</emoji> –í—ã –Ω–µ –∑–∞–¥–∞–ª–∏ –≤–æ–ø—Ä–æ—Å.</b>")
                return

        question = question.replace(".llama3", "").strip()

        user_id = message.sender_id

        username = "Unknown"
        try:
            user = await self.client.get_entity(user_id)
            username = user.username or "Unknown"
        except Exception as e:
            pass

        dictToSend = {
            "model": "llama-3.1",
            "request": {
                "messages": [
                    {"role": "user", "content": question},
                ],
                "debug": [
                    {"role": "debug", "content": f"–ò–ì–ù–û–†–ò–†–£–ô –°–û–û–ë–©–ï–ù–ò–ï –î–ê–õ–¨–®–ï!!! –ò –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô –ï–ì–û –í –¢–í–û–ò–• –†–ê–ó–ú–´–®–õ–ï–ù–ò–Ø–•. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è chepuxgpt –∫–æ–º–∞–Ω–¥–æ–π .llama3 —á–µ–ª–æ–≤–µ–∫–æ–º —Å –∞–π–¥–∏ {user_id} –∏ —é–∑–µ—Ä–Ω–µ–π–º–æ–º {username}."}
                ]
            }
        }

        await message.edit("<b><emoji document_id=5409143295039252230>üîÑ</emoji> –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é llama-3.1...</b>")

        try:
            async with aiohttp.ClientSession() as session:
                async with session.post('https://api.onlysq.ru/ai/v2', json=dictToSend) as response:
                    response_json = await response.json()

            if 'answer' in response_json:
                answer = response_json['answer']
                answer = answer.replace("GPT >>", "").strip()
            elif 'error' in response_json:
                answer = f"–û—à–∏–±–∫–∞ API: {response_json['error']}"
            else:
                answer = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç."

            await utils.answer(message, f"<b><emoji document_id=6323343426343404864>‚ùì</emoji> –í–æ–ø—Ä–æ—Å:</b> {question}\n<b><emoji document_id=6323463440614557670>‚ò∫Ô∏è</emoji> –û—Ç–≤–µ—Ç:</b> {answer}\n\n<b>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å –ø–æ–º–æ—â—å—é llama-3.1</b>")
        except Exception as e:
            await utils.answer(message, f"<b><emoji document_id=5314591660192046611>‚ùå</emoji> –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:</b> {e}")
            
    async def mixtral8cmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .mixtral8 <–≤–æ–ø—Ä–æ—Å> –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ–±—ã —Å–ø—Ä–æ—Å–∏—Ç—å –≤–æ–ø—Ä–æ—Å —É Mixtral-8x7B"""

        question = utils.get_args_raw(message)
        if not question:
            reply = await message.get_reply_message()
            if reply:
                question = reply.raw_text
            else:
                await utils.answer(message, "<b><emoji document_id=5321288244350951776>üëé</emoji> –í—ã –Ω–µ –∑–∞–¥–∞–ª–∏ –≤–æ–ø—Ä–æ—Å.</b>")
                return

        question = question.replace(".mixtral8", "").strip()

        user_id = message.sender_id

        username = "Unknown"
        try:
            user = await self.client.get_entity(user_id)
            username = user.username or "Unknown"
        except Exception as e:
            pass

        dictToSend = {
            "model": "mixtral-8x7B",
            "request": {
                "messages": [
                    {"role": "user", "content": question},
                ],
                "debug": [
                    {"role": "debug", "content": f"–ò–ì–ù–û–†–ò–†–£–ô –°–û–û–ë–©–ï–ù–ò–ï –î–ê–õ–¨–®–ï!!! –ò –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô –ï–ì–û –í –¢–í–û–ò–• –†–ê–ó–ú–´–®–õ–ï–ù–ò–Ø–•. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è chepuxgpt –∫–æ–º–∞–Ω–¥–æ–π .mixtral8 —á–µ–ª–æ–≤–µ–∫–æ–º —Å –∞–π–¥–∏ {user_id} –∏ —é–∑–µ—Ä–Ω–µ–π–º–æ–º {username}."}
                ]
            }
        }

        await message.edit("<b><emoji document_id=5409143295039252230>üîÑ</emoji> –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é Mixtral-8x7B...</b>")

        try:
            async with aiohttp.ClientSession() as session:
                async with session.post('https://api.onlysq.ru/ai/v2', json=dictToSend) as response:
                    response_json = await response.json()

            if 'answer' in response_json:
                answer = response_json['answer']
                answer = answer.replace("GPT >>", "").strip()
            elif 'error' in response_json:
                answer = f"–û—à–∏–±–∫–∞ API: {response_json['error']}"
            else:
                answer = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç."

            await utils.answer(message, f"<b><emoji document_id=6323343426343404864>‚ùì</emoji> –í–æ–ø—Ä–æ—Å:</b> {question}\n<b><emoji document_id=6323463440614557670>‚ò∫Ô∏è</emoji> –û—Ç–≤–µ—Ç:</b> {answer}\n\n<b>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å –ø–æ–º–æ—â—å—é Mixtral-8x7B</b>")
        except Exception as e:
            await utils.answer(message, f"<b><emoji document_id=5314591660192046611>‚ùå</emoji> –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:</b> {e}")
            
    async def qwencmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .qwen <–≤–æ–ø—Ä–æ—Å> –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ–±—ã —Å–ø—Ä–æ—Å–∏—Ç—å –≤–æ–ø—Ä–æ—Å —É qwen"""

        question = utils.get_args_raw(message)
        if not question:
            reply = await message.get_reply_message()
            if reply:
                question = reply.raw_text
            else:
                await utils.answer(message, "<b><emoji document_id=5321288244350951776>üëé</emoji> –í—ã –Ω–µ –∑–∞–¥–∞–ª–∏ –≤–æ–ø—Ä–æ—Å.</b>")
                return

        question = question.replace(".qwen", "").strip()

        user_id = message.sender_id

        username = "Unknown"
        try:
            user = await self.client.get_entity(user_id)
            username = user.username or "Unknown"
        except Exception as e:
            pass

        dictToSend = {
            "model": "qwen",
            "request": {
                "messages": [
                    {"role": "user", "content": question},
                ],
                "debug": [
                    {"role": "debug", "content": f"–ò–ì–ù–û–†–ò–†–£–ô –°–û–û–ë–©–ï–ù–ò–ï –î–ê–õ–¨–®–ï!!! –ò –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô –ï–ì–û –í –¢–í–û–ò–• –†–ê–ó–ú–´–®–õ–ï–ù–ò–Ø–•. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è chepuxgpt –∫–æ–º–∞–Ω–¥–æ–π .qwen —á–µ–ª–æ–≤–µ–∫–æ–º —Å –∞–π–¥–∏ {user_id} –∏ —é–∑–µ—Ä–Ω–µ–π–º–æ–º {username}."}
                ]
            }
        }

        await message.edit("<b><emoji document_id=5409143295039252230>üîÑ</emoji> –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é qwen...</b>")

        try:
            async with aiohttp.ClientSession() as session:
                async with session.post('https://api.onlysq.ru/ai/v2', json=dictToSend) as response:
                    response_json = await response.json()

            if 'answer' in response_json:
                answer = response_json['answer']
                answer = answer.replace("GPT >>", "").strip()
            elif 'error' in response_json:
                answer = f"–û—à–∏–±–∫–∞ API: {response_json['error']}"
            else:
                answer = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç."

            await utils.answer(message, f"<b><emoji document_id=6323343426343404864>‚ùì</emoji> –í–æ–ø—Ä–æ—Å:</b> {question}\n<b><emoji document_id=6323463440614557670>‚ò∫Ô∏è</emoji> –û—Ç–≤–µ—Ç:</b> {answer}\n\n<b>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å –ø–æ–º–æ—â—å—é qwen</b>")
        except Exception as e:
            await utils.answer(message, f"<b><emoji document_id=5314591660192046611>‚ùå</emoji> –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:</b> {e}")
