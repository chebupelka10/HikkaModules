import requests
import asyncio
from telethon import functions, types
from .. import loader, utils
import aiohttp
import io

@loader.tds
class OnlySqAPIMod(loader.Module):
    """–ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã —Å –ø–æ–º–æ—â—å—é —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π GPT, –∞ —Ç–∞–∫–∂–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è by @chepuxcat, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ OnlySq api."""
    strings = {"name": "OnlySqAPI"}

    def __init__(self):
        self.config = loader.ModuleConfig(
            "IS_18_PLUS", False, lambda m: self.strings["name"],
            "GPT_MODEL", "ChatGPT", lambda m: self.strings["name"],  # –î–æ–±–∞–≤–ª–µ–Ω –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ GPT
            "IMG_MODEL", "Kandinsky", lambda m: self.strings["name"],  # –î–æ–±–∞–≤–ª–µ–Ω –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        )
        self.gpt_models = ["ChatGPT", "Gemini", "Blackbox"]
        self.image_models = ["Kandinsky", "Flux"]

    async def client_ready(self, client, db):
        self.client = client

    def _get_model_prompt(self, model, question):
        if model == "ChatGPT":
            return [{"role": "user", "content": question}]
        elif model == "gemini":
            return {"model": "gemini", "request": {"messages": [{"content": question}], "meta": {}}}
        elif model == "blackbox":
            return {"model": "blackbox", "request": {"messages": [{"role": "user", "content": question}]}}
        else:
            return None

    def _get_image_model_prompt(self, model, prompt, image_count=1):
        if model == "Kandinsky":
            return {
                "model": "kandinsky",
                "request": {
                    "messages": [{"role": "user", "content": prompt}],
                    "meta": {"image_count": image_count}
                }
            }
        elif model == "Flux":
            return {
                "model": "flux",
                "request": {
                    "messages": [{"content": prompt}]
                }
            }
        else:
            return None

    async def aicmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ai <–≤–æ–ø—Ä–æ—Å> –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Å–ø—Ä–æ—Å–∏—Ç—å –≤–æ–ø—Ä–æ—Å —É –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        question = utils.get_args_raw(message)
        if not question:
            reply = await message.get_reply_message()
            if reply:
                question = reply.raw_text
            else:
                await utils.answer(message, "<b><emoji document_id=5321288244350951776>üëé</emoji> –í—ã –Ω–µ –∑–∞–¥–∞–ª–∏ –≤–æ–ø—Ä–æ—Å.</b>")
                return

        question = question.replace(".ai", "").strip()
        
        selected_model = self.config["GPT_MODEL"]
        prompt = self._get_model_prompt(selected_model, question)

        if not prompt:
            await utils.answer(message, f"<b><emoji document_id=5314591660192046611>‚ùå</emoji> –ú–æ–¥–µ–ª—å \"{selected_model}\" –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π: ChatGPT, gemini, blackbox. –í—ã–±—Ä–∞—Ç—å –∏—Ö –º–æ–∂–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥–µ, –≤ —Ä–∞–∑–¥–µ–ª–µ GPT_MODEL</b>")
            return

        await message.edit(f"<b><emoji document_id=5409143295039252230>üîÑ</emoji> –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é {selected_model}...</b>")
        try:
            api_url = 'https://api.onlysq.ru/ai/v1' if selected_model == "ChatGPT" else 'https://api.onlysq.ru/ai/v2'
            
            async with aiohttp.ClientSession() as session:
                async with session.post(api_url, json=prompt) as response:
                    response.raise_for_status()
                    response_json = await response.json()
                    if 'answer' in response_json:
                        answer = response_json['answer'].replace("GPT >>", "").strip()
                    elif 'error' in response_json:
                        answer = f"–û—à–∏–±–∫–∞ API: {response_json['error']}"
                    else:
                        answer = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API."
            
            await utils.answer(message, f"<b><emoji document_id=6323343426343404864>‚ùì</emoji> –í–æ–ø—Ä–æ—Å:</b> {question}\n<b><emoji document_id=6323463440614557670>‚ò∫Ô∏è</emoji> –û—Ç–≤–µ—Ç:</b> {answer}\n\n<b>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å –ø–æ–º–æ—â—å—é {selected_model}</b>")
        except Exception as e:
            await utils.answer(message, f"<b><emoji document_id=5314591660192046611>‚ùå</emoji> –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:</b> {e}")

    async def imgaicmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ imgai <–∑–∞–ø—Ä–æ—Å> —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."""
        request_text = utils.get_args_raw(message)
        if not request_text:
            reply = await message.get_reply_message()
            if reply:
                request_text = reply.raw_text
            else:
                await utils.answer(message, "<b><emoji document_id=5321288244350951776>üëé</emoji> –í—ã –Ω–µ –∑–∞–¥–∞–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ imgai</b>")
                return
        
        request_text = request_text.replace(".imgai", "").strip()

        parts = request_text.rsplit(' ', 1)
        if len(parts) == 2 and parts[1].isdigit():
            image_count = int(parts[1])
            prompt = parts[0]
        else:
            image_count = 1
            prompt = request_text

        selected_image_model = self.config["IMG_MODEL"]
        image_prompt = self._get_image_model_prompt(selected_image_model, prompt, image_count)

        if not image_prompt:
            await utils.answer(message, f"<b><emoji document_id=5314591660192046611>‚ùå</emoji> –ú–æ–¥–µ–ª—å \"{selected_image_model}\" –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π: Kandinsky, Flux.</b>")
            return

        await utils.answer(message, f"<b><emoji document_id=5409143295039252230>üîÑ</emoji> –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é {selected_image_model}...</b>")

        try:
            api_url = 'https://api.onlysq.ru/ai/v2'

            async with aiohttp.ClientSession() as session:
                async with session.post(api_url, json=image_prompt, timeout=110) as response:
                    response.raise_for_status()
                    response_json = await response.json()

                    images = response_json.get('answer', [])
                    
                    for index, image_url in enumerate(images):
                        image_url = image_url.replace('https://', 'http://')
                        async with session.get(image_url) as image_response:
                            image_data = await image_response.read()
                            image_buffer = io.BytesIO(image_data)
                            image_buffer.name = image_url.split('/')[-1]
                            await message.client.send_file(message.to_id, image_buffer, reply_to=message.id)

                    if images:
                        await utils.answer(message, f"<b><emoji document_id=5237907553152672597>‚úÖ</emoji> –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ(-—è) –≥–æ—Ç–æ–≤–æ(-—ã)! –û–Ω–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n<emoji document_id=6323343426343404864>‚ùì</emoji> –ó–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {prompt}\n\n–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å –ø–æ–º–æ—â—å—é {selected_image_model}</b>")
                    else:
                        await utils.answer(message, "<b><emoji document_id=5314591660192046611>‚ùå</emoji> –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç API.</b>")
        except Exception as e:
            await utils.answer(message, f"<b><emoji document_id=5314591660192046611>‚ùå</emoji> –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API:</b> {e}")
            
    async def imaginensfwcmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ imaginensfw <–∑–∞–ø—Ä–æ—Å> —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –¢–æ–ª—å–∫–æ 18+, –≤–∞–º –Ω–∞–¥–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —á—Ç–æ –≤–∞–º 18+"""

        if not self.config["IS_18_PLUS"]:
            await utils.answer(message, "<b><emoji document_id=5314591660192046611>‚ùå</emoji> –ì–µ–Ω–µ—Ä–∞—Ü–∏—è NSFW –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –í—ã –¥–æ–ª–∂–Ω—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ –≤–∞–º 18+ –≤ –∫–æ–Ω—Ñ–∏–≥–µ. –ü–æ—Å—Ç–∞–≤–∏–≤ –≤ IS_18_PLUS –∑–Ω–∞—á–µ–Ω–∏–µ: True, –∏–ª–∏ –Ω–∞–ø–∏—Å–∞–≤ <code>fcfg OnlySqAPI IS_18_PLUS True</code></b>")
            return
        
        request_text = utils.get_args_raw(message)
        if not request_text:
            reply = await message.get_reply_message()
            if reply:
                request_text = reply.raw_text
            else:
                await utils.answer(message, "<b><emoji document_id=5321288244350951776>üëé</emoji> –í—ã –Ω–µ –∑–∞–¥–∞–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ imaginensfw</b>")
                return
        
        request_text = request_text.replace(".imaginensfw", "").strip()

        parts = request_text.rsplit(' ', 1)
        if len(parts) == 2 and parts[1].isdigit():
            image_count = int(parts[1])
            prompt = parts[0]
        else:
            image_count = 1
            prompt = request_text

        await utils.answer(message, "<b><emoji document_id=5409143295039252230>üîÑ</emoji> –ì–µ–Ω–µ—Ä–∏—Ä—É—é NSFW –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...</b>")

        try:
            dict_to_send = {
                "model": "nsfw-xl",
                "request": {'messages': [{"content": prompt}], "meta": {"image_count": image_count}}
            }

            async with aiohttp.ClientSession() as session:
                async with session.post('http://api.onlysq.ru/ai/v2', json=dict_to_send, timeout=110) as response:
                    response.raise_for_status()
                    response_json = await response.json()

                    images = response_json.get('answer', [])
                    
                    for index, image_url in enumerate(images):
                        image_url = image_url.replace('https://', 'http://')
                        async with session.get(image_url) as image_response:
                            image_data = await image_response.read()
                            image_buffer = io.BytesIO(image_data)
                            image_buffer.name = image_url.split('/')[-1]
                            await message.client.send_file(message.to_id, image_buffer, reply_to=message.id)

                    if images:
                        await utils.answer(message, f"<b><emoji document_id=5237907553152672597>‚úÖ</emoji> NSFW –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ! –û–Ω–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n<emoji document_id=6323343426343404864>‚ùì</emoji> –ó–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {prompt}</b>")
                    else:
                        await utils.answer(message, "<b><emoji document_id=5314591660192046611>‚ùå</emoji> –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç API.</b>")
        except Exception as e:
            await utils.answer(message, f"<b><emoji document_id=5314591660192046611>‚ùå</emoji> –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API:</b> {e}")
            
    async def gptcmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ gpt <–≤–æ–ø—Ä–æ—Å> –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ–±—ã —Å–ø—Ä–æ—Å–∏—Ç—å –≤–æ–ø—Ä–æ—Å —É chatgpt"""
        
        question = utils.get_args_raw(message)
        if not question:
            reply = await message.get_reply_message()
            if reply:
                question = reply.raw_text
            else:
                await utils.answer(message, "<b><emoji document_id=5321288244350951776>üëé</emoji> –í—ã –Ω–µ –∑–∞–¥–∞–ª–∏ –≤–æ–ø—Ä–æ—Å.</b>")
                return

        question = question.replace(".gpt", "").strip()
        question = question.replace(".–≥–ø—Ç", "").strip()
        
        prompt = [{"role": "user", "content": question}]

        await message.edit("<b><emoji document_id=5409143295039252230>üîÑ</emoji> –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é ChatGPT...</b>")
        try:
            response = requests.post('https://api.onlysq.ru/ai/v1', json=prompt)
            response_json = response.json()
            if 'answer' in response_json:
                answer = response_json['answer']
                answer = answer.replace("GPT >>", "").strip()
            elif 'error' in response_json:
                answer = f"–û—à–∏–±–∫–∞ API: {response_json['error']}"
            else:
                answer = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API."

            await utils.answer(message, f"<b><emoji document_id=6323343426343404864>‚ùì</emoji> –í–æ–ø—Ä–æ—Å:</b> {question}\n<b><emoji document_id=6323463440614557670>‚ò∫Ô∏è</emoji> –û—Ç–≤–µ—Ç:</b> {answer}\n\n<b>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å –ø–æ–º–æ—â—å—é ChatGPT</b>")
        except Exception as e:
            await utils.answer(message, f"<b><emoji document_id=5314591660192046611>‚ùå</emoji> –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:</b> {e}")
            
    async def geminicmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ gemini <–≤–æ–ø—Ä–æ—Å> –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Å–ø—Ä–æ—Å–∏—Ç—å –≤–æ–ø—Ä–æ—Å —É Gemini"""
        
        question = utils.get_args_raw(message)
        if not question:
            reply = await message.get_reply_message()
            if reply:
                question = reply.raw_text
            else:
                await utils.answer(message, "<b><emoji document_id=5321288244350951776>üëé</emoji> –í—ã –Ω–µ –∑–∞–¥–∞–ª–∏ –≤–æ–ø—Ä–æ—Å.</b>")
                return

        question = question.replace(".gemini", "").strip()
        
        dictToSend = {"model": "gemini", "request": {"messages": [{"content": question}]}}

        await message.edit("<b><emoji document_id=5409143295039252230>üîÑ</emoji> –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é Gemini...</b>")
        try:
            response = requests.post('https://api.onlysq.ru/ai/v2', json=dictToSend)
            response_json = response.json()
            if 'answer' in response_json:
                answer = response_json['answer']
            elif 'error' in response_json:
                answer = f"–û—à–∏–±–∫–∞ API: {response_json['error']}"
            else:
                answer = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API."

            await utils.answer(message, f"<b><emoji document_id=6323343426343404864>‚ùì</emoji> –í–æ–ø—Ä–æ—Å:</b> {question}\n<b><emoji document_id=6323463440614557670>‚ò∫Ô∏è</emoji> –û—Ç–≤–µ—Ç:</b> {answer}\n\n<b>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é Gemini</b>")
        except Exception as e:
            await utils.answer(message, f"<b><emoji document_id=5314591660192046611>‚ùå</emoji> –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:</b> {e}")
            
    async def bbcmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ bb <–≤–æ–ø—Ä–æ—Å> –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Å–ø—Ä–æ—Å–∏—Ç—å –≤–æ–ø—Ä–æ—Å —É Blackbox"""
        
        question = utils.get_args_raw(message)
        if not question:
            reply = await message.get_reply_message()
            if reply:
                question = reply.raw_text
            else:
                await utils.answer(message, "<b><emoji document_id=5321288244350951776>üëé</emoji> –í—ã –Ω–µ –∑–∞–¥–∞–ª–∏ –≤–æ–ø—Ä–æ—Å.</b>")
                return

        question = question.replace(".bb", "").strip()
        
        dictToSend = {"model": "blackbox", "request": {"messages": [{"content": question}]}}

        await message.edit("<b><emoji document_id=5409143295039252230>üîÑ</emoji> –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é Blackbox...</b>")
        try:
            response = requests.post('https://api.onlysq.ru/ai/v2', json=dictToSend)
            response_json = response.json()
            if 'answer' in response_json:
                answer = response_json['answer']
            elif 'error' in response_json:
                answer = f"–û—à–∏–±–∫–∞ API: {response_json['error']}"
            else:
                answer = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API."

            await utils.answer(message, f"<b><emoji document_id=6323343426343404864>‚ùì</emoji> –í–æ–ø—Ä–æ—Å:</b> {question}\n<b><emoji document_id=6323463440614557670>‚ò∫Ô∏è</emoji> –û—Ç–≤–µ—Ç:</b> {answer}\n\n<b>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é Blackbox</b>")
        except Exception as e:
            await utils.answer(message, f"<b><emoji document_id=5314591660192046611>‚ùå</emoji> –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:</b> {e}")
            
    async def fluxcmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ flux <–∑–∞–ø—Ä–æ—Å> —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."""
        
        request_text = utils.get_args_raw(message)
        if not request_text:
            reply = await message.get_reply_message()
            if reply:
                request_text = reply.raw_text
            else:
                await utils.answer(message, "<b><emoji document_id=5321288244350951776>üëé</emoji> –í—ã –Ω–µ –∑–∞–¥–∞–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ flux</b>")
                return
        
        request_text = request_text.replace(".flux", "").strip()

        parts = request_text.rsplit(' ', 1)
        if len(parts) == 2 and parts[1].isdigit():
            image_count = int(parts[1])
            prompt = parts[0]
        else:
            image_count = 1
            prompt = request_text

        await utils.answer(message, "<b><emoji document_id=5409143295039252230>üîÑ</emoji> –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é flux...</b>")

        try:
            dict_to_send = {
                "model": "flux",
                "request": {'messages': [{"content": prompt}], "meta": {"image_count": image_count}}
            }

            async with aiohttp.ClientSession() as session:
                async with session.post('https://api.onlysq.ru/ai/v2', json=dict_to_send, timeout=110) as response:
                    response.raise_for_status()
                    response_json = await response.json()

                    images = response_json.get('answer', [])
                    
                    for index, image_url in enumerate(images):
                        image_url = image_url.replace('https://', 'http://')
                        async with session.get(image_url) as image_response:
                            image_data = await image_response.read()
                            image_buffer = io.BytesIO(image_data)
                            image_buffer.name = image_url.split('/')[-1]
                            await message.client.send_file(message.to_id, image_buffer, reply_to=message.id)

                    if images:
                        await utils.answer(message, f"<b><emoji document_id=5237907553152672597>‚úÖ</emoji> –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ! –û–Ω–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n<emoji document_id=6323343426343404864>‚ùì</emoji> –ó–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {prompt}\n–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å –ø–æ–º–æ—â—å—é flux</b>")
                    else:
                        await utils.answer(message, "<b><emoji document_id=5314591660192046611>‚ùå</emoji> –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç API.</b>")
        except Exception as e:
            await utils.answer(message, f"<b><emoji document_id=5314591660192046611>‚ùå</emoji> –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API:</b> {e}")
            
    async def kandinskycmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ kandinsky <–∑–∞–ø—Ä–æ—Å> —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."""
        
        request_text = utils.get_args_raw(message)
        if not request_text:
            reply = await message.get_reply_message()
            if reply:
                request_text = reply.raw_text
            else:
                await utils.answer(message, "<b><emoji document_id=5321288244350951776>üëé</emoji> –í—ã –Ω–µ –∑–∞–¥–∞–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ kandinsky</b>")
                return
        
        request_text = request_text.replace(".kandinsky", "").strip()

        parts = request_text.rsplit(' ', 1)
        if len(parts) == 2 and parts[1].isdigit():
            image_count = int(parts[1])
            prompt = parts[0]
        else:
            image_count = 1
            prompt = request_text

        await utils.answer(message, "<b><emoji document_id=5409143295039252230>üîÑ</emoji> –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é kandinsky...</b>")

        try:
            dict_to_send = {
                "model": "kandinsky",
                "request": {'messages': [{"content": prompt}], "meta": {"image_count": image_count}}
            }

            async with aiohttp.ClientSession() as session:
                async with session.post('https://api.onlysq.ru/ai/v2', json=dict_to_send, timeout=110) as response:
                    response.raise_for_status()
                    response_json = await response.json()

                    images = response_json.get('answer', [])
                    
                    for index, image_url in enumerate(images):
                        image_url = image_url.replace('https://', 'http://')
                        async with session.get(image_url) as image_response:
                            image_data = await image_response.read()
                            image_buffer = io.BytesIO(image_data)
                            image_buffer.name = image_url.split('/')[-1]
                            await message.client.send_file(message.to_id, image_buffer, reply_to=message.id)

                    if images:
                        await utils.answer(message, f"<b><emoji document_id=5237907553152672597>‚úÖ</emoji> –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ! –û–Ω–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n<emoji document_id=6323343426343404864>‚ùì</emoji> –ó–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {prompt}\n–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å –ø–æ–º–æ—â—å—é kandinsky</b>")
                    else:
                        await utils.answer(message, "<b><emoji document_id=5314591660192046611>‚ùå</emoji> –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç API.</b>")
        except Exception as e:
            await utils.answer(message, f"<b><emoji document_id=5314591660192046611>‚ùå</emoji> –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API:</b> {e}")
